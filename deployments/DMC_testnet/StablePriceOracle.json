{
  "address": "0x8C1C71d6009a4efd1ed65935014129222240620A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb76cc95cb1f26e143a950653306c79865af97e91d1971c81d637fe6b4250faf5",
  "receipt": {
    "to": null,
    "from": "0xF5D046Cde2f17759b12dd0deE54891Cd081e8Ac0",
    "contractAddress": "0x8C1C71d6009a4efd1ed65935014129222240620A",
    "transactionIndex": 0,
    "gasUsed": "1397828",
    "logsBloom": "0x
    "blockHash": "0x24ca03775f2d29ea6394102c64e8eb102c5d76f6393edabca1b6dc9d8fc921dd",
    "transactionHash": "0xb76cc95cb1f26e143a950653306c79865af97e91d1971c81d637fe6b4250faf5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32892,
        "transactionHash": "0xb76cc95cb1f26e143a950653306c79865af97e91d1971c81d637fe6b4250faf5",
        "address": "0x8C1C71d6009a4efd1ed65935014129222240620A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5d046cde2f17759b12dd0dee54891cd081e8ac0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x24ca03775f2d29ea6394102c64e8eb102c5d76f6393edabca1b6dc9d8fc921dd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 32892,
        "transactionHash": "0xb76cc95cb1f26e143a950653306c79865af97e91d1971c81d637fe6b4250faf5",
        "address": "0x8C1C71d6009a4efd1ed65935014129222240620A",
        "topics": [
          "0x205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb015"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000000878678326eac90000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000056bc75e2d63100000",
        "logIndex": 1,
        "blockHash": "0x24ca03775f2d29ea6394102c64e8eb102c5d76f6393edabca1b6dc9d8fc921dd"
      }
    ],
    "blockNumber": 32892,
    "cumulativeGasUsed": "1397828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00d2F806774b1386feE7DE5E9b64eAB6b015107d",
    [
      "5000000000000000000000",
      "2500000000000000000000",
      "1000000000000000000000",
      "500000000000000000000",
      "100000000000000000000"
    ]
  ],
  "solcInputHash": "f98e7313f5a0be30da73bb38870d9794",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string)\":{\"details\":\"Returns the price to register a name.\",\"params\":{\"name\":\"The name being registered.\"},\"returns\":{\"_0\":\"The price of this registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setOracle(address)\":{\"details\":\"Sets the price oracle address\",\"params\":{\"_usdOracle\":\"The address of the price oracle to use.\"}},\"setPrices(uint256[])\":{\"details\":\"Sets prices.\",\"params\":{\"_prices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracle.sol\":\"StablePriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface PriceOracle {\\n    /**\\n     * @dev Returns the price to register a name.\\n     * @param name The name being registered.\\n     * @return The price of this registration, in wei.\\n     */\\n    function price(string calldata name) external view returns(uint);\\n}\\n\",\"keccak256\":\"0x0fbffaa611b6327be9cd75b68f0aeccf4ef22b0bbe676f1d7695e30e18b53cf2\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n}\\n\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is Ownable, PriceOracle {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Price by length. Element 0 is for 1-length names, and so on.\\n    uint[] public prices;\\n\\n    // Oracle address\\n    AggregatorInterface public usdOracle;\\n\\n    event OracleChanged(address oracle);\\n    event PriceChanged(uint[] prices);\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\\\"price(string)\\\") ^ keccak256(\\\"premium(string)\\\"));\\n\\n    constructor(AggregatorInterface _usdOracle, uint[] memory _prices) public {\\n        usdOracle = _usdOracle;\\n        setPrices(_prices);\\n    }\\n\\n    function price(string calldata name) external view override returns(uint) {\\n        uint len = name.strlen();\\n        if(len > prices.length) {\\n            len = prices.length;\\n        }\\n        require(len > 0);\\n        \\n        uint basePrice = prices[len - 1];\\n        basePrice = basePrice.add(_premium(name));\\n\\n        return attoUSDToWei(basePrice);\\n    }\\n\\n    /**\\n     * @dev Sets prices.\\n     * @param _prices The price array. Each element corresponds to a specific\\n     *                    name length; names longer than the length of the array\\n     *                    default to the price of the last element. Values are\\n     *                    in base price units, equal to one attodollar (1e-18\\n     *                    dollar) each.\\n     */\\n    function setPrices(uint[] memory _prices) public onlyOwner {\\n        prices = _prices;\\n        emit PriceChanged(_prices);\\n    }\\n\\n    /**\\n     * @dev Sets the price oracle address\\n     * @param _usdOracle The address of the price oracle to use.\\n     */\\n    function setOracle(AggregatorInterface _usdOracle) public onlyOwner {\\n        usdOracle = _usdOracle;\\n        emit OracleChanged(address(_usdOracle));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(string calldata name) external view returns(uint) {\\n        return attoUSDToWei(_premium(name));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(string memory name) virtual internal view returns(uint) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(1e8).div(ethPrice);\\n    }\\n\\n    function weiToAttoUSD(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(ethPrice).div(1e8);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x4a0b8269b1c44b602097611a54e34dedb9cf6ddd3cb953e6367a442b2df682f7\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b9338038062001b938339818101604052810190620000379190620003dd565b620000576200004b620000b160201b60201c565b620000b960201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000a9816200017d60201b60201c565b505062000700565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200018d620001e260201b60201c565b8060019080519060200190620001a59291906200029c565b507f205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb01581604051620001d79190620004f3565b60405180910390a150565b620001f2620000b160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002186200027360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000271576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002689062000517565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054828255906000526020600020908101928215620002db579160200282015b82811115620002da578251825591602001919060010190620002bd565b5b509050620002ea9190620002ee565b5090565b5b8082111562000309576000816000905550600101620002ef565b5090565b6000620003246200031e8462000562565b62000539565b905080838252602082019050828560208602820111156200034457600080fd5b60005b858110156200037857816200035d8882620003c6565b84526020840193506020830192505060018101905062000347565b5050509392505050565b600082601f8301126200039457600080fd5b8151620003a68482602086016200030d565b91505092915050565b600081519050620003c081620006cc565b92915050565b600081519050620003d781620006e6565b92915050565b60008060408385031215620003f157600080fd5b60006200040185828601620003af565b925050602083015167ffffffffffffffff8111156200041f57600080fd5b6200042d8582860162000382565b9150509250929050565b6000620004458383620004e2565b60208301905092915050565b60006200045e82620005a1565b6200046a8185620005b9565b9350620004778362000591565b8060005b83811015620004ae57815162000492888262000437565b97506200049f83620005ac565b9250506001810190506200047b565b5085935050505092915050565b6000620004ca602083620005ca565b9150620004d782620006a3565b602082019050919050565b620004ed8162000623565b82525050565b600060208201905081810360008301526200050f818462000451565b905092915050565b600060208201905081810360008301526200053281620004bb565b9050919050565b60006200054562000558565b90506200055382826200062d565b919050565b6000604051905090565b600067ffffffffffffffff82111562000580576200057f62000663565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000620005e88262000603565b9050919050565b6000620005fc82620005db565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620006388262000692565b810181811067ffffffffffffffff821117156200065a576200065962000663565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b620006d781620005ef565b8114620006e357600080fd5b50565b620006f18162000623565b8114620006fd57600080fd5b50565b61148380620007106000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638fb00688116100665780638fb0068814610133578063bc31c1c114610163578063c8a4271f14610193578063f2fde38b146101b1578063fe2c6198146101cd5761009e565b806301ffc9a7146100a3578063715018a6146100d357806379cf92d3146100dd5780637adbf973146100f95780638da5cb5b14610115575b600080fd5b6100bd60048036038101906100b89190610d28565b6101fd565b6040516100ca9190610f55565b60405180910390f35b6100db6102f1565b005b6100f760048036038101906100f29190610ce7565b610305565b005b610113600480360381019061010e9190610d51565b61035e565b005b61011d6103e1565b60405161012a9190610f18565b60405180910390f35b61014d60048036038101906101489190610da3565b61040a565b60405161015a9190610fcb565b60405180910390f35b61017d60048036038101906101789190610de8565b610469565b60405161018a9190610fcb565b60405180910390f35b61019b61048d565b6040516101a89190610f70565b60405180910390f35b6101cb60048036038101906101c69190610cbe565b6104b3565b005b6101e760048036038101906101e29190610da3565b610537565b6040516101f49190610fcb565b60405180910390f35b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ea57507f8fb006889887fe22b99b1137685f6e3f300e6d1742d1a83bca46b580a98925387ffe2c619874d0eefe2754e000f94bf8e8d25af34324c98305907f8d29c90ee618187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6102f9610674565b61030360006106f2565b565b61030d610674565b8060019080519060200190610323929190610b0b565b507f205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb015816040516103539190610f33565b60405180910390a150565b610366610674565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418816040516103d69190610f18565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061046161045c84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b6565b6107bd565b905092915050565b6001818154811061047957600080fd5b906000526020600020016000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104bb610674565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290610f8b565b60405180910390fd5b610534816106f2565b50565b60008061058784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610893565b905060018054905081111561059f5760018054905090505b600081116105ac57600080fd5b6000600180836105bc9190611162565b815481106105f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905061065f61065086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b6565b82610a6e90919063ffffffff16565b905061066a816107bd565b9250505092915050565b61067c610a96565b73ffffffffffffffffffffffffffffffffffffffff1661069a6103e1565b73ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790610fab565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082857600080fd5b505afa15801561083c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108609190610d7a565b905061088b8161087d6305f5e10086610a9e90919063ffffffff16565b610ae390919063ffffffff16565b915050919050565b60008060008084519050600092505b80821015610a635760008583815181106108e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109345760018361092d9190611081565b9250610a4f565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109765760028361096f9190611081565b9250610a4e565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109b8576003836109b19190611081565b9250610a4d565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109f9576004836109f29190611081565b9250610a4c565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610a3b57600583610a349190611081565b9250610a4b565b600683610a489190611081565b92505b5b5b5b5b508280610a5b9061127b565b9350506108a2565b829350505050919050565b6000808284610a7d9190611081565b905083811015610a8c57600080fd5b8091505092915050565b600033905090565b600080831415610ab15760009050610add565b60008284610abf9190611108565b9050828482610ace91906110d7565b14610ad857600080fd5b809150505b92915050565b6000808211610af157600080fd5b60008284610aff91906110d7565b90508091505092915050565b828054828255906000526020600020908101928215610b47579160200282015b82811115610b46578251825591602001919060010190610b2b565b5b509050610b549190610b58565b5090565b5b80821115610b71576000816000905550600101610b59565b5090565b6000610b88610b838461100b565b610fe6565b90508083825260208201905082856020860282011115610ba757600080fd5b60005b85811015610bd75781610bbd8882610ca9565b845260208401935060208301925050600181019050610baa565b5050509392505050565b600081359050610bf0816113da565b92915050565b600082601f830112610c0757600080fd5b8135610c17848260208601610b75565b91505092915050565b600081359050610c2f816113f1565b92915050565b600081359050610c4481611408565b92915050565b600081519050610c598161141f565b92915050565b60008083601f840112610c7157600080fd5b8235905067ffffffffffffffff811115610c8a57600080fd5b602083019150836001820283011115610ca257600080fd5b9250929050565b600081359050610cb881611436565b92915050565b600060208284031215610cd057600080fd5b6000610cde84828501610be1565b91505092915050565b600060208284031215610cf957600080fd5b600082013567ffffffffffffffff811115610d1357600080fd5b610d1f84828501610bf6565b91505092915050565b600060208284031215610d3a57600080fd5b6000610d4884828501610c20565b91505092915050565b600060208284031215610d6357600080fd5b6000610d7184828501610c35565b91505092915050565b600060208284031215610d8c57600080fd5b6000610d9a84828501610c4a565b91505092915050565b60008060208385031215610db657600080fd5b600083013567ffffffffffffffff811115610dd057600080fd5b610ddc85828601610c5f565b92509250509250929050565b600060208284031215610dfa57600080fd5b6000610e0884828501610ca9565b91505092915050565b6000610e1d8383610efa565b60208301905092915050565b610e3281611196565b82525050565b6000610e4382611047565b610e4d818561105f565b9350610e5883611037565b8060005b83811015610e89578151610e708882610e11565b9750610e7b83611052565b925050600181019050610e5c565b5085935050505092915050565b610e9f816111a8565b82525050565b610eae81611226565b82525050565b6000610ec1602683611070565b9150610ecc82611362565b604082019050919050565b6000610ee4602083611070565b9150610eef826113b1565b602082019050919050565b610f038161121c565b82525050565b610f128161121c565b82525050565b6000602082019050610f2d6000830184610e29565b92915050565b60006020820190508181036000830152610f4d8184610e38565b905092915050565b6000602082019050610f6a6000830184610e96565b92915050565b6000602082019050610f856000830184610ea5565b92915050565b60006020820190508181036000830152610fa481610eb4565b9050919050565b60006020820190508181036000830152610fc481610ed7565b9050919050565b6000602082019050610fe06000830184610f09565b92915050565b6000610ff0611001565b9050610ffc828261124a565b919050565b6000604051905090565b600067ffffffffffffffff82111561102657611025611322565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061108c8261121c565b91506110978361121c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110cc576110cb6112c4565b5b828201905092915050565b60006110e28261121c565b91506110ed8361121c565b9250826110fd576110fc6112f3565b5b828204905092915050565b60006111138261121c565b915061111e8361121c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611157576111566112c4565b5b828202905092915050565b600061116d8261121c565b91506111788361121c565b92508282101561118b5761118a6112c4565b5b828203905092915050565b60006111a1826111fc565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006111eb82611196565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061123182611238565b9050919050565b6000611243826111fc565b9050919050565b61125382611351565b810181811067ffffffffffffffff8211171561127257611271611322565b5b80604052505050565b60006112868261121c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112b9576112b86112c4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6113e381611196565b81146113ee57600080fd5b50565b6113fa816111b4565b811461140557600080fd5b50565b611411816111e0565b811461141c57600080fd5b50565b611428816111f2565b811461143357600080fd5b50565b61143f8161121c565b811461144a57600080fd5b5056fea26469706673582212202b48e9921bb1f2b1df248d93c93273b1f4234fa018f6d57cb30c34c86bf73d6764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638fb00688116100665780638fb0068814610133578063bc31c1c114610163578063c8a4271f14610193578063f2fde38b146101b1578063fe2c6198146101cd5761009e565b806301ffc9a7146100a3578063715018a6146100d357806379cf92d3146100dd5780637adbf973146100f95780638da5cb5b14610115575b600080fd5b6100bd60048036038101906100b89190610d28565b6101fd565b6040516100ca9190610f55565b60405180910390f35b6100db6102f1565b005b6100f760048036038101906100f29190610ce7565b610305565b005b610113600480360381019061010e9190610d51565b61035e565b005b61011d6103e1565b60405161012a9190610f18565b60405180910390f35b61014d60048036038101906101489190610da3565b61040a565b60405161015a9190610fcb565b60405180910390f35b61017d60048036038101906101789190610de8565b610469565b60405161018a9190610fcb565b60405180910390f35b61019b61048d565b6040516101a89190610f70565b60405180910390f35b6101cb60048036038101906101c69190610cbe565b6104b3565b005b6101e760048036038101906101e29190610da3565b610537565b6040516101f49190610fcb565b60405180910390f35b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ea57507f8fb006889887fe22b99b1137685f6e3f300e6d1742d1a83bca46b580a98925387ffe2c619874d0eefe2754e000f94bf8e8d25af34324c98305907f8d29c90ee618187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6102f9610674565b61030360006106f2565b565b61030d610674565b8060019080519060200190610323929190610b0b565b507f205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb015816040516103539190610f33565b60405180910390a150565b610366610674565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418816040516103d69190610f18565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061046161045c84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b6565b6107bd565b905092915050565b6001818154811061047957600080fd5b906000526020600020016000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104bb610674565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290610f8b565b60405180910390fd5b610534816106f2565b50565b60008061058784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610893565b905060018054905081111561059f5760018054905090505b600081116105ac57600080fd5b6000600180836105bc9190611162565b815481106105f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905061065f61065086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107b6565b82610a6e90919063ffffffff16565b905061066a816107bd565b9250505092915050565b61067c610a96565b73ffffffffffffffffffffffffffffffffffffffff1661069a6103e1565b73ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790610fab565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082857600080fd5b505afa15801561083c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108609190610d7a565b905061088b8161087d6305f5e10086610a9e90919063ffffffff16565b610ae390919063ffffffff16565b915050919050565b60008060008084519050600092505b80821015610a635760008583815181106108e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109345760018361092d9190611081565b9250610a4f565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109765760028361096f9190611081565b9250610a4e565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109b8576003836109b19190611081565b9250610a4d565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156109f9576004836109f29190611081565b9250610a4c565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610a3b57600583610a349190611081565b9250610a4b565b600683610a489190611081565b92505b5b5b5b5b508280610a5b9061127b565b9350506108a2565b829350505050919050565b6000808284610a7d9190611081565b905083811015610a8c57600080fd5b8091505092915050565b600033905090565b600080831415610ab15760009050610add565b60008284610abf9190611108565b9050828482610ace91906110d7565b14610ad857600080fd5b809150505b92915050565b6000808211610af157600080fd5b60008284610aff91906110d7565b90508091505092915050565b828054828255906000526020600020908101928215610b47579160200282015b82811115610b46578251825591602001919060010190610b2b565b5b509050610b549190610b58565b5090565b5b80821115610b71576000816000905550600101610b59565b5090565b6000610b88610b838461100b565b610fe6565b90508083825260208201905082856020860282011115610ba757600080fd5b60005b85811015610bd75781610bbd8882610ca9565b845260208401935060208301925050600181019050610baa565b5050509392505050565b600081359050610bf0816113da565b92915050565b600082601f830112610c0757600080fd5b8135610c17848260208601610b75565b91505092915050565b600081359050610c2f816113f1565b92915050565b600081359050610c4481611408565b92915050565b600081519050610c598161141f565b92915050565b60008083601f840112610c7157600080fd5b8235905067ffffffffffffffff811115610c8a57600080fd5b602083019150836001820283011115610ca257600080fd5b9250929050565b600081359050610cb881611436565b92915050565b600060208284031215610cd057600080fd5b6000610cde84828501610be1565b91505092915050565b600060208284031215610cf957600080fd5b600082013567ffffffffffffffff811115610d1357600080fd5b610d1f84828501610bf6565b91505092915050565b600060208284031215610d3a57600080fd5b6000610d4884828501610c20565b91505092915050565b600060208284031215610d6357600080fd5b6000610d7184828501610c35565b91505092915050565b600060208284031215610d8c57600080fd5b6000610d9a84828501610c4a565b91505092915050565b60008060208385031215610db657600080fd5b600083013567ffffffffffffffff811115610dd057600080fd5b610ddc85828601610c5f565b92509250509250929050565b600060208284031215610dfa57600080fd5b6000610e0884828501610ca9565b91505092915050565b6000610e1d8383610efa565b60208301905092915050565b610e3281611196565b82525050565b6000610e4382611047565b610e4d818561105f565b9350610e5883611037565b8060005b83811015610e89578151610e708882610e11565b9750610e7b83611052565b925050600181019050610e5c565b5085935050505092915050565b610e9f816111a8565b82525050565b610eae81611226565b82525050565b6000610ec1602683611070565b9150610ecc82611362565b604082019050919050565b6000610ee4602083611070565b9150610eef826113b1565b602082019050919050565b610f038161121c565b82525050565b610f128161121c565b82525050565b6000602082019050610f2d6000830184610e29565b92915050565b60006020820190508181036000830152610f4d8184610e38565b905092915050565b6000602082019050610f6a6000830184610e96565b92915050565b6000602082019050610f856000830184610ea5565b92915050565b60006020820190508181036000830152610fa481610eb4565b9050919050565b60006020820190508181036000830152610fc481610ed7565b9050919050565b6000602082019050610fe06000830184610f09565b92915050565b6000610ff0611001565b9050610ffc828261124a565b919050565b6000604051905090565b600067ffffffffffffffff82111561102657611025611322565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061108c8261121c565b91506110978361121c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110cc576110cb6112c4565b5b828201905092915050565b60006110e28261121c565b91506110ed8361121c565b9250826110fd576110fc6112f3565b5b828204905092915050565b60006111138261121c565b915061111e8361121c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611157576111566112c4565b5b828202905092915050565b600061116d8261121c565b91506111788361121c565b92508282101561118b5761118a6112c4565b5b828203905092915050565b60006111a1826111fc565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006111eb82611196565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061123182611238565b9050919050565b6000611243826111fc565b9050919050565b61125382611351565b810181811067ffffffffffffffff8211171561127257611271611322565b5b80604052505050565b60006112868261121c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112b9576112b86112c4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6113e381611196565b81146113ee57600080fd5b50565b6113fa816111b4565b811461140557600080fd5b50565b611411816111e0565b811461141c57600080fd5b50565b611428816111f2565b811461143357600080fd5b50565b61143f8161121c565b811461144a57600080fd5b5056fea26469706673582212202b48e9921bb1f2b1df248d93c93273b1f4234fa018f6d57cb30c34c86bf73d6764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string)": {
        "details": "Returns the price to register a name.",
        "params": {
          "name": "The name being registered."
        },
        "returns": {
          "_0": "The price of this registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setOracle(address)": {
        "details": "Sets the price oracle address",
        "params": {
          "_usdOracle": "The address of the price oracle to use."
        }
      },
      "setPrices(uint256[])": {
        "details": "Sets prices.",
        "params": {
          "_prices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12014,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "prices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12017,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "usdOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorInterface)12003"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorInterface)12003": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}