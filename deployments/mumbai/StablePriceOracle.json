{
  "address": "0x8dba2fF44Da53F4E278016b4e1dba5EC8b9f0d4D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6109bf407afdad726acaa8b8454747a86f866d3f04dba240c5cf7987a1753bb",
  "receipt": {
    "to": null,
    "from": "0xc3fd475EbBFa9aB06f0F0182fA7976d66955623a",
    "contractAddress": "0x8dba2fF44Da53F4E278016b4e1dba5EC8b9f0d4D",
    "transactionIndex": 25,
    "gasUsed": "1502553",
    "logsBloom": "0x
    "blockHash": "0x1dd93e2868832f8a992b0e7010d4af77367dd269c305693c07d63a6223b0f565",
    "transactionHash": "0xb6109bf407afdad726acaa8b8454747a86f866d3f04dba240c5cf7987a1753bb",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 28062878,
        "transactionHash": "0xb6109bf407afdad726acaa8b8454747a86f866d3f04dba240c5cf7987a1753bb",
        "address": "0x8dba2fF44Da53F4E278016b4e1dba5EC8b9f0d4D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3fd475ebbfa9ab06f0f0182fa7976d66955623a"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x1dd93e2868832f8a992b0e7010d4af77367dd269c305693c07d63a6223b0f565"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 28062878,
        "transactionHash": "0xb6109bf407afdad726acaa8b8454747a86f866d3f04dba240c5cf7987a1753bb",
        "address": "0x8dba2fF44Da53F4E278016b4e1dba5EC8b9f0d4D",
        "topics": [
          "0x205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb015"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000000878678326eac90000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000000000000000000000000000056bc75e2d63100000",
        "logIndex": 100,
        "blockHash": "0x1dd93e2868832f8a992b0e7010d4af77367dd269c305693c07d63a6223b0f565"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 28062878,
        "transactionHash": "0xb6109bf407afdad726acaa8b8454747a86f866d3f04dba240c5cf7987a1753bb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c3fd475ebbfa9ab06f0f0182fa7976d66955623a",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000801d892a469a70000000000000000000000000000000000000000000000000cb788a2537920960000000000000000000000000000000000000000000006f7003a10d9800ec8190000000000000000000000000000000000000000000000000caf86c9c0d4b6ef0000000000000000000000000000000000000000000006f7004212b212b331c0",
        "logIndex": 101,
        "blockHash": "0x1dd93e2868832f8a992b0e7010d4af77367dd269c305693c07d63a6223b0f565"
      }
    ],
    "blockNumber": 28062878,
    "cumulativeGasUsed": "5438236",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb835C0C3Ea8b132b55fddf8988366b89f13599Dc",
    [
      "5000000000000000000000",
      "2500000000000000000000",
      "1000000000000000000000",
      "500000000000000000000",
      "100000000000000000000"
    ]
  ],
  "solcInputHash": "defae579ed8754f5e541852a80384572",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string)\":{\"details\":\"Returns the price to register a name.\",\"params\":{\"name\":\"The name being registered.\"},\"returns\":{\"_0\":\"The price of this registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOracle(address)\":{\"details\":\"Sets the price oracle address\",\"params\":{\"_usdOracle\":\"The address of the price oracle to use.\"}},\"setPrices(uint256[])\":{\"details\":\"Sets prices.\",\"params\":{\"_prices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracle.sol\":\"StablePriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface PriceOracle {\\n    /**\\n     * @dev Returns the price to register a name.\\n     * @param name The name being registered.\\n     * @return The price of this registration, in wei.\\n     */\\n    function price(string calldata name) external view returns(uint);\\n}\\n\",\"keccak256\":\"0x0fbffaa611b6327be9cd75b68f0aeccf4ef22b0bbe676f1d7695e30e18b53cf2\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n}\\n\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is Ownable, PriceOracle {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Price by length. Element 0 is for 1-length names, and so on.\\n    uint[] public prices;\\n\\n    // Oracle address\\n    AggregatorInterface public usdOracle;\\n\\n    event OracleChanged(address oracle);\\n    event PriceChanged(uint[] prices);\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\\\"price(string)\\\") ^ keccak256(\\\"premium(string)\\\"));\\n\\n    constructor(AggregatorInterface _usdOracle, uint[] memory _prices) public {\\n        usdOracle = _usdOracle;\\n        setPrices(_prices);\\n    }\\n\\n    function price(string calldata name) external view override returns(uint) {\\n        uint len = name.strlen();\\n        if(len > prices.length) {\\n            len = prices.length;\\n        }\\n        require(len > 0);\\n        \\n        uint basePrice = prices[len - 1];\\n        basePrice = basePrice.add(_premium(name));\\n\\n        return attoUSDToWei(basePrice);\\n    }\\n\\n    /**\\n     * @dev Sets prices.\\n     * @param _prices The price array. Each element corresponds to a specific\\n     *                    name length; names longer than the length of the array\\n     *                    default to the price of the last element. Values are\\n     *                    in base price units, equal to one attodollar (1e-18\\n     *                    dollar) each.\\n     */\\n    function setPrices(uint[] memory _prices) public onlyOwner {\\n        prices = _prices;\\n        emit PriceChanged(_prices);\\n    }\\n\\n    /**\\n     * @dev Sets the price oracle address\\n     * @param _usdOracle The address of the price oracle to use.\\n     */\\n    function setOracle(AggregatorInterface _usdOracle) public onlyOwner {\\n        usdOracle = _usdOracle;\\n        emit OracleChanged(address(_usdOracle));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(string calldata name) external view returns(uint) {\\n        return attoUSDToWei(_premium(name));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(string memory name) virtual internal view returns(uint) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(1e8).div(ethPrice);\\n    }\\n\\n    function weiToAttoUSD(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(ethPrice).div(1e8);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x4a0b8269b1c44b602097611a54e34dedb9cf6ddd3cb953e6367a442b2df682f7\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001d3e38038062001d3e833981810160405281019062000037919062000397565b6000620000496200014160201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000139816200014960201b60201c565b5050620006ba565b600033905090565b620001596200014160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200017f6200022d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001d8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001cf90620004d1565b60405180910390fd5b8060019080519060200190620001f092919062000256565b507f205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb01581604051620002229190620004ad565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b82805482825590600052602060002090810192821562000295579160200282015b828111156200029457825182559160200191906001019062000277565b5b509050620002a49190620002a8565b5090565b5b80821115620002c3576000816000905550600101620002a9565b5090565b6000620002de620002d8846200051c565b620004f3565b90508083825260208201905082856020860282011115620002fe57600080fd5b60005b8581101562000332578162000317888262000380565b84526020840193506020830192505060018101905062000301565b5050509392505050565b600082601f8301126200034e57600080fd5b815162000360848260208601620002c7565b91505092915050565b6000815190506200037a8162000686565b92915050565b6000815190506200039181620006a0565b92915050565b60008060408385031215620003ab57600080fd5b6000620003bb8582860162000369565b925050602083015167ffffffffffffffff811115620003d957600080fd5b620003e7858286016200033c565b9150509250929050565b6000620003ff83836200049c565b60208301905092915050565b600062000418826200055b565b62000424818562000573565b935062000431836200054b565b8060005b83811015620004685781516200044c8882620003f1565b9750620004598362000566565b92505060018101905062000435565b5085935050505092915050565b60006200048460208362000584565b915062000491826200065d565b602082019050919050565b620004a781620005dd565b82525050565b60006020820190508181036000830152620004c981846200040b565b905092915050565b60006020820190508181036000830152620004ec8162000475565b9050919050565b6000620004ff62000512565b90506200050d8282620005e7565b919050565b6000604051905090565b600067ffffffffffffffff8211156200053a57620005396200061d565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000620005a282620005bd565b9050919050565b6000620005b68262000595565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620005f2826200064c565b810181811067ffffffffffffffff821117156200061457620006136200061d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6200069181620005a9565b81146200069d57600080fd5b50565b620006ab81620005dd565b8114620006b757600080fd5b50565b61167480620006ca6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638fb00688116100665780638fb0068814610133578063bc31c1c114610163578063c8a4271f14610193578063f2fde38b146101b1578063fe2c6198146101cd5761009e565b806301ffc9a7146100a3578063715018a6146100d357806379cf92d3146100dd5780637adbf973146100f95780638da5cb5b14610115575b600080fd5b6100bd60048036038101906100b89190610f19565b6101fd565b6040516100ca9190611146565b60405180910390f35b6100db6102f1565b005b6100f760048036038101906100f29190610ed8565b61042b565b005b610113600480360381019061010e9190610f42565b6104f8565b005b61011d6105ef565b60405161012a9190611109565b60405180910390f35b61014d60048036038101906101489190610f94565b610618565b60405161015a91906111bc565b60405180910390f35b61017d60048036038101906101789190610fd9565b610677565b60405161018a91906111bc565b60405180910390f35b61019b61069b565b6040516101a89190611161565b60405180910390f35b6101cb60048036038101906101c69190610eaf565b6106c1565b005b6101e760048036038101906101e29190610f94565b61086a565b6040516101f491906111bc565b60405180910390f35b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ea57507f8fb006889887fe22b99b1137685f6e3f300e6d1742d1a83bca46b580a98925387ffe2c619874d0eefe2754e000f94bf8e8d25af34324c98305907f8d29c90ee618187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6102f96109a7565b73ffffffffffffffffffffffffffffffffffffffff166103176105ef565b73ffffffffffffffffffffffffffffffffffffffff161461036d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103649061119c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6104336109a7565b73ffffffffffffffffffffffffffffffffffffffff166104516105ef565b73ffffffffffffffffffffffffffffffffffffffff16146104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e9061119c565b60405180910390fd5b80600190805190602001906104bd929190610cfc565b507f205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb015816040516104ed9190611124565b60405180910390a150565b6105006109a7565b73ffffffffffffffffffffffffffffffffffffffff1661051e6105ef565b73ffffffffffffffffffffffffffffffffffffffff1614610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b9061119c565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418816040516105e49190611109565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061066f61066a84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506109af565b6109b6565b905092915050565b6001818154811061068757600080fd5b906000526020600020016000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106c96109a7565b73ffffffffffffffffffffffffffffffffffffffff166106e76105ef565b73ffffffffffffffffffffffffffffffffffffffff161461073d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107349061119c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061117c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806108ba84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610a8c565b90506001805490508111156108d25760018054905090505b600081116108df57600080fd5b6000600180836108ef9190611353565b81548110610926577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905061099261098386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506109af565b82610c6790919063ffffffff16565b905061099d816109b6565b9250505092915050565b600033905090565b6000919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2157600080fd5b505afa158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a599190610f6b565b9050610a8481610a766305f5e10086610c8f90919063ffffffff16565b610cd490919063ffffffff16565b915050919050565b60008060008084519050600092505b80821015610c5c576000858381518110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610b2d57600183610b269190611272565b9250610c48565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610b6f57600283610b689190611272565b9250610c47565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610bb157600383610baa9190611272565b9250610c46565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610bf257600483610beb9190611272565b9250610c45565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610c3457600583610c2d9190611272565b9250610c44565b600683610c419190611272565b92505b5b5b5b5b508280610c549061146c565b935050610a9b565b829350505050919050565b6000808284610c769190611272565b905083811015610c8557600080fd5b8091505092915050565b600080831415610ca25760009050610cce565b60008284610cb091906112f9565b9050828482610cbf91906112c8565b14610cc957600080fd5b809150505b92915050565b6000808211610ce257600080fd5b60008284610cf091906112c8565b90508091505092915050565b828054828255906000526020600020908101928215610d38579160200282015b82811115610d37578251825591602001919060010190610d1c565b5b509050610d459190610d49565b5090565b5b80821115610d62576000816000905550600101610d4a565b5090565b6000610d79610d74846111fc565b6111d7565b90508083825260208201905082856020860282011115610d9857600080fd5b60005b85811015610dc85781610dae8882610e9a565b845260208401935060208301925050600181019050610d9b565b5050509392505050565b600081359050610de1816115cb565b92915050565b600082601f830112610df857600080fd5b8135610e08848260208601610d66565b91505092915050565b600081359050610e20816115e2565b92915050565b600081359050610e35816115f9565b92915050565b600081519050610e4a81611610565b92915050565b60008083601f840112610e6257600080fd5b8235905067ffffffffffffffff811115610e7b57600080fd5b602083019150836001820283011115610e9357600080fd5b9250929050565b600081359050610ea981611627565b92915050565b600060208284031215610ec157600080fd5b6000610ecf84828501610dd2565b91505092915050565b600060208284031215610eea57600080fd5b600082013567ffffffffffffffff811115610f0457600080fd5b610f1084828501610de7565b91505092915050565b600060208284031215610f2b57600080fd5b6000610f3984828501610e11565b91505092915050565b600060208284031215610f5457600080fd5b6000610f6284828501610e26565b91505092915050565b600060208284031215610f7d57600080fd5b6000610f8b84828501610e3b565b91505092915050565b60008060208385031215610fa757600080fd5b600083013567ffffffffffffffff811115610fc157600080fd5b610fcd85828601610e50565b92509250509250929050565b600060208284031215610feb57600080fd5b6000610ff984828501610e9a565b91505092915050565b600061100e83836110eb565b60208301905092915050565b61102381611387565b82525050565b600061103482611238565b61103e8185611250565b935061104983611228565b8060005b8381101561107a5781516110618882611002565b975061106c83611243565b92505060018101905061104d565b5085935050505092915050565b61109081611399565b82525050565b61109f81611417565b82525050565b60006110b2602683611261565b91506110bd82611553565b604082019050919050565b60006110d5602083611261565b91506110e0826115a2565b602082019050919050565b6110f48161140d565b82525050565b6111038161140d565b82525050565b600060208201905061111e600083018461101a565b92915050565b6000602082019050818103600083015261113e8184611029565b905092915050565b600060208201905061115b6000830184611087565b92915050565b60006020820190506111766000830184611096565b92915050565b60006020820190508181036000830152611195816110a5565b9050919050565b600060208201905081810360008301526111b5816110c8565b9050919050565b60006020820190506111d160008301846110fa565b92915050565b60006111e16111f2565b90506111ed828261143b565b919050565b6000604051905090565b600067ffffffffffffffff82111561121757611216611513565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061127d8261140d565b91506112888361140d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112bd576112bc6114b5565b5b828201905092915050565b60006112d38261140d565b91506112de8361140d565b9250826112ee576112ed6114e4565b5b828204905092915050565b60006113048261140d565b915061130f8361140d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611348576113476114b5565b5b828202905092915050565b600061135e8261140d565b91506113698361140d565b92508282101561137c5761137b6114b5565b5b828203905092915050565b6000611392826113ed565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006113dc82611387565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061142282611429565b9050919050565b6000611434826113ed565b9050919050565b61144482611542565b810181811067ffffffffffffffff8211171561146357611462611513565b5b80604052505050565b60006114778261140d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114aa576114a96114b5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6115d481611387565b81146115df57600080fd5b50565b6115eb816113a5565b81146115f657600080fd5b50565b611602816113d1565b811461160d57600080fd5b50565b611619816113e3565b811461162457600080fd5b50565b6116308161140d565b811461163b57600080fd5b5056fea2646970667358221220c7eac486120050bc40260bafbb8450e5e2553158119ce4bff5878fd8ee3f153864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638fb00688116100665780638fb0068814610133578063bc31c1c114610163578063c8a4271f14610193578063f2fde38b146101b1578063fe2c6198146101cd5761009e565b806301ffc9a7146100a3578063715018a6146100d357806379cf92d3146100dd5780637adbf973146100f95780638da5cb5b14610115575b600080fd5b6100bd60048036038101906100b89190610f19565b6101fd565b6040516100ca9190611146565b60405180910390f35b6100db6102f1565b005b6100f760048036038101906100f29190610ed8565b61042b565b005b610113600480360381019061010e9190610f42565b6104f8565b005b61011d6105ef565b60405161012a9190611109565b60405180910390f35b61014d60048036038101906101489190610f94565b610618565b60405161015a91906111bc565b60405180910390f35b61017d60048036038101906101789190610fd9565b610677565b60405161018a91906111bc565b60405180910390f35b61019b61069b565b6040516101a89190611161565b60405180910390f35b6101cb60048036038101906101c69190610eaf565b6106c1565b005b6101e760048036038101906101e29190610f94565b61086a565b6040516101f491906111bc565b60405180910390f35b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e27bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ea57507f8fb006889887fe22b99b1137685f6e3f300e6d1742d1a83bca46b580a98925387ffe2c619874d0eefe2754e000f94bf8e8d25af34324c98305907f8d29c90ee618187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6102f96109a7565b73ffffffffffffffffffffffffffffffffffffffff166103176105ef565b73ffffffffffffffffffffffffffffffffffffffff161461036d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103649061119c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6104336109a7565b73ffffffffffffffffffffffffffffffffffffffff166104516105ef565b73ffffffffffffffffffffffffffffffffffffffff16146104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e9061119c565b60405180910390fd5b80600190805190602001906104bd929190610cfc565b507f205152ff14678ea9d228fb51f9d3551e83109917eff381ef94f92aef647fb015816040516104ed9190611124565b60405180910390a150565b6105006109a7565b73ffffffffffffffffffffffffffffffffffffffff1661051e6105ef565b73ffffffffffffffffffffffffffffffffffffffff1614610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b9061119c565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418816040516105e49190611109565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061066f61066a84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506109af565b6109b6565b905092915050565b6001818154811061068757600080fd5b906000526020600020016000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106c96109a7565b73ffffffffffffffffffffffffffffffffffffffff166106e76105ef565b73ffffffffffffffffffffffffffffffffffffffff161461073d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107349061119c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49061117c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806108ba84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610a8c565b90506001805490508111156108d25760018054905090505b600081116108df57600080fd5b6000600180836108ef9190611353565b81548110610926577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905061099261098386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506109af565b82610c6790919063ffffffff16565b905061099d816109b6565b9250505092915050565b600033905090565b6000919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2157600080fd5b505afa158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a599190610f6b565b9050610a8481610a766305f5e10086610c8f90919063ffffffff16565b610cd490919063ffffffff16565b915050919050565b60008060008084519050600092505b80821015610c5c576000858381518110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610b2d57600183610b269190611272565b9250610c48565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610b6f57600283610b689190611272565b9250610c47565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610bb157600383610baa9190611272565b9250610c46565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610bf257600483610beb9190611272565b9250610c45565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610c3457600583610c2d9190611272565b9250610c44565b600683610c419190611272565b92505b5b5b5b5b508280610c549061146c565b935050610a9b565b829350505050919050565b6000808284610c769190611272565b905083811015610c8557600080fd5b8091505092915050565b600080831415610ca25760009050610cce565b60008284610cb091906112f9565b9050828482610cbf91906112c8565b14610cc957600080fd5b809150505b92915050565b6000808211610ce257600080fd5b60008284610cf091906112c8565b90508091505092915050565b828054828255906000526020600020908101928215610d38579160200282015b82811115610d37578251825591602001919060010190610d1c565b5b509050610d459190610d49565b5090565b5b80821115610d62576000816000905550600101610d4a565b5090565b6000610d79610d74846111fc565b6111d7565b90508083825260208201905082856020860282011115610d9857600080fd5b60005b85811015610dc85781610dae8882610e9a565b845260208401935060208301925050600181019050610d9b565b5050509392505050565b600081359050610de1816115cb565b92915050565b600082601f830112610df857600080fd5b8135610e08848260208601610d66565b91505092915050565b600081359050610e20816115e2565b92915050565b600081359050610e35816115f9565b92915050565b600081519050610e4a81611610565b92915050565b60008083601f840112610e6257600080fd5b8235905067ffffffffffffffff811115610e7b57600080fd5b602083019150836001820283011115610e9357600080fd5b9250929050565b600081359050610ea981611627565b92915050565b600060208284031215610ec157600080fd5b6000610ecf84828501610dd2565b91505092915050565b600060208284031215610eea57600080fd5b600082013567ffffffffffffffff811115610f0457600080fd5b610f1084828501610de7565b91505092915050565b600060208284031215610f2b57600080fd5b6000610f3984828501610e11565b91505092915050565b600060208284031215610f5457600080fd5b6000610f6284828501610e26565b91505092915050565b600060208284031215610f7d57600080fd5b6000610f8b84828501610e3b565b91505092915050565b60008060208385031215610fa757600080fd5b600083013567ffffffffffffffff811115610fc157600080fd5b610fcd85828601610e50565b92509250509250929050565b600060208284031215610feb57600080fd5b6000610ff984828501610e9a565b91505092915050565b600061100e83836110eb565b60208301905092915050565b61102381611387565b82525050565b600061103482611238565b61103e8185611250565b935061104983611228565b8060005b8381101561107a5781516110618882611002565b975061106c83611243565b92505060018101905061104d565b5085935050505092915050565b61109081611399565b82525050565b61109f81611417565b82525050565b60006110b2602683611261565b91506110bd82611553565b604082019050919050565b60006110d5602083611261565b91506110e0826115a2565b602082019050919050565b6110f48161140d565b82525050565b6111038161140d565b82525050565b600060208201905061111e600083018461101a565b92915050565b6000602082019050818103600083015261113e8184611029565b905092915050565b600060208201905061115b6000830184611087565b92915050565b60006020820190506111766000830184611096565b92915050565b60006020820190508181036000830152611195816110a5565b9050919050565b600060208201905081810360008301526111b5816110c8565b9050919050565b60006020820190506111d160008301846110fa565b92915050565b60006111e16111f2565b90506111ed828261143b565b919050565b6000604051905090565b600067ffffffffffffffff82111561121757611216611513565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061127d8261140d565b91506112888361140d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112bd576112bc6114b5565b5b828201905092915050565b60006112d38261140d565b91506112de8361140d565b9250826112ee576112ed6114e4565b5b828204905092915050565b60006113048261140d565b915061130f8361140d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611348576113476114b5565b5b828202905092915050565b600061135e8261140d565b91506113698361140d565b92508282101561137c5761137b6114b5565b5b828203905092915050565b6000611392826113ed565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006113dc82611387565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061142282611429565b9050919050565b6000611434826113ed565b9050919050565b61144482611542565b810181811067ffffffffffffffff8211171561146357611462611513565b5b80604052505050565b60006114778261140d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114aa576114a96114b5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6115d481611387565b81146115df57600080fd5b50565b6115eb816113a5565b81146115f657600080fd5b50565b611602816113d1565b811461160d57600080fd5b50565b611619816113e3565b811461162457600080fd5b50565b6116308161140d565b811461163b57600080fd5b5056fea2646970667358221220c7eac486120050bc40260bafbb8450e5e2553158119ce4bff5878fd8ee3f153864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string)": {
        "details": "Returns the price to register a name.",
        "params": {
          "name": "The name being registered."
        },
        "returns": {
          "_0": "The price of this registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOracle(address)": {
        "details": "Sets the price oracle address",
        "params": {
          "_usdOracle": "The address of the price oracle to use."
        }
      },
      "setPrices(uint256[])": {
        "details": "Sets prices.",
        "params": {
          "_prices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10487,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "prices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10490,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "usdOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorInterface)10476"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorInterface)10476": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}