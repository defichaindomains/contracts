{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/ethregistrar/DFIUSDTOracle.sol": {
      "content": "pragma solidity >=0.8.4;\n\nimport \"../staterelayer/IStateRelayer.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\n\ncontract DFIUSDTOracle is Ownable{\n   address private _stateRelayer;\n\n\nconstructor(address initialOwner, address initializedStateRelayer) {\n    transferOwnership(initialOwner);\n    _stateRelayer = initializedStateRelayer;\n}\n\n   function setStateRelayer(address _address) onlyOwner public {\n        _stateRelayer = _address;\n    }\n\n   function latestAnswer() public view returns (uint256) {\n    (, IStateRelayer.DEXInfo memory dex) = IStateRelayer(_stateRelayer).getDexPairInfo('dUSDT-DFI');\n    uint256 result = (dex.firstTokenBalance * 10**8) / dex.secondTokenBalance; \n    return result;\n}\n\n}\n"
    },
    "contracts/staterelayer/IStateRelayer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\npragma solidity >=0.8.4;\n\ninterface IStateRelayer {\n  struct DEXInfo {\n    // the price of the primary token in USDT/ USD\n    uint256 primaryTokenPrice;\n    // the 24H trading volume of the pair (in USD)\n    uint256 volume24H;\n    // the total liquidity of the pair (in USD)\n    uint256 totalLiquidity;\n    // the APR (in percentage)\n    // TODO: may remove this variable later,\n    // as it seems that APR = commissions + decimals\n    uint256 APR;\n    // the number of first tokens in the pool\n    uint256 firstTokenBalance;\n    // the number of second tokens in the pool\n    uint256 secondTokenBalance;\n    // the rewards percentage\n    uint256 rewards;\n    // the commissions percentage\n    uint256 commissions;\n  }\n\n  struct VaultGeneralInformation {\n    // the number of open vaults\n    // integer values, no decimals\n    uint256 noOfVaultsNoDecimals;\n    // total loan value in USD\n    uint256 totalLoanValue;\n    // total collateral value in USD\n    uint256 totalCollateralValue;\n    uint256 totalCollateralizationRatio;\n    // integer values, no decimals\n    uint256 activeAuctionsNoDecimals;\n  }\n\n  struct MasterNodeInformation {\n    // the total value locked in USD in masternodes\n    uint256 totalValueLockedInMasterNodes;\n    // the number of master nodes that have their DFI locked for 0 years\n    // integer values, no decimals\n    uint256 zeroYearLockedNoDecimals;\n    // the number of master nodes that have their DFI locked for 5 years\n    // integer values, no decimals\n    uint256 fiveYearLockedNoDecimals;\n    // the number of master nodes that have their DFI locked for 10 years\n    // integer values, no decimals\n    uint256 tenYearLockedNoDecimals;\n  }\n\n  /**\n   * @notice Getter function to get the information about dexes\n   * @return Last time that information about dexes are updated\n   * @return Total24HVolume of all the dexes\n   * @return TVL of all dexes\n   */\n  function getDexInfo() external view returns (uint256, uint256, uint256);\n\n  /**\n   * @notice Getter function to get information about a certain dex\n   * @param _pair The pair to get information about\n   * @return Last time that information about all dexes are updated\n   * @return Information about that pair\n   */\n  function getDexPairInfo(\n    string memory _pair\n  ) external view returns (uint256, DEXInfo memory);\n\n  /**\n   * @notice Getter function for general vault info\n   * @return Last time that information about vaults is updated\n   * @return Information about vaults\n   */\n  function getVaultInfo()\n    external\n    view\n    returns (uint256, VaultGeneralInformation memory);\n\n  /**\n   * @notice Getter function for master node information\n   * @return Last time that information about the master nodes is updated\n   * @return Master nodes information\n   */\n  function getMasterNodeInfo()\n    external\n    view\n    returns (uint256, MasterNodeInformation memory);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}